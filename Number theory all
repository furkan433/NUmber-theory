#include <bits/stdc++.h>
using namespace std;
//chak divisor time complejity O(root n).
//int countdivisor(int n){
//int divisor=0;
//for(int i=1;i*i<n;i++){
//    if(i*i==n)divisor+=1;
//    else if(n%i==0)divisor+=2;
//}
//return divisor;
//}
//print prime number,time complixty O(nlog(logn)).
//#define M 1000000
////bool prime[M];
//bool status[M];
//
//void solv(int N) {
//    int sq = sqrt(N);
//
//    for (int i = 4; i <= N; i += 2) {
//        status[i] = 1;
//    }
//
//    for (int i = 3; i <= sq; i += 2) {
//        if (status[i] == 0) {
//            for (int j = i * i; j <= N; j += i)
//                status[j] = 1;
//        }
//    }
//
//    status[1] = 1;
//}

//bool isprime(int n){
//if(n<2)return 0;
//for(long long i=2;i*i<=n;i++){ // time complejity O(root n)
//    if(n%i==0)return 0;
//}
//return 1;
//}
//bitwise civ--------------------------------------------------------------
//int N =100,prime[100]; 
//int status[100/32];
//void sieve()
//{
//     int i, j, sqrtN; 
//     sqrtN = int( sqrt( N ) );
//     for( i = 3; i <= sqrtN; i += 2 ) 
//     {
//		 if( check(status[i/32],i%32)==0)
//		 {
//	 		 for( j = i*i; j <= N; j += 2*i )
//			 {
//				 status[j/32]=Set(status[j/32],j % 32)   ;
//	 		 }
//		 }
//	 }
//	 puts("2");
//	 for(i=3;i<=N;i+=2)
//		 if( check(status[i/32],i%32)==0)
//	 	 printf("%d\n",i);
//	 	
//}

int main(){

//cout<<countdivisor(20)<<endl;

//    int n;
//    cin>>n;
//    if(isprime(n)==true){
//        cout<<"prime"<<endl;
//    }
//    else cout<<"not prime";



//int fact=1;
//	for(int i=1;i<=100;i++)
//	{
//		fact=((fact%97)*(i%97))%97;
//
//	}
//	printf("%d\n",fact);

    return 0;
}
